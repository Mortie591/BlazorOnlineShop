@page "/"

@using OnlineStore.Data.Models;
@using OnlineStore.Data.Services;
@using Telerik.DataSource;
@using Telerik.DataSource.Extensions;

@inject IDataAccessService dataAccessService

<PageTitle>Home</PageTitle>
<container>
    <h1>Online Store</h1>
    <section class="carousel">
        <Carousel CarouselData="@categories"></Carousel>
    </section>
    <section>
        <TelerikFilter ValueChanged="@OnValueChanged">
            <FilterFields>
                <FilterField Name="@(nameof(Category.Name))" Type="@(typeof(string))" Label="Category"></FilterField>
            </FilterFields>
        </TelerikFilter>
    </section>
    <section class="product-list">
        @if (products == null || products.Count == 0)
        {
            <p class="alert alert-warning">No available products</p>
        }
        else
        {
            @foreach (var category in data)
            {
                <section>
                    <div>
                        <h3>Products in @category.Name</h3>
                    </div>
                    <container class="k-card-deck justify-content-start flex-wrap">
                        @foreach (var product in category.CategoryProducts)
                        {
                            <Card Item="product"></Card>
                        }
                    </container>
                </section>
            }
        }
    </section>
</container>


@code {
    private List<Product>? products;
    private List<Category>? categories;
    private List<Category> data;

    private void OnValueChanged(CompositeFilterDescriptor filter)
    {
        var dataSourceRequest = new DataSourceRequest { Filters = new List<IFilterDescriptor> { filter } };
        var datasourceResult = categories.ToDataSourceResult(dataSourceRequest);
        data = datasourceResult.Data.Cast<Category>().ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        products = (List<Product>) await dataAccessService.GetProductsFromJsonAsync();
        categories = (List<Category>)await dataAccessService.GetCategoriesFromJsonAsync();

        foreach (var c in categories)
        {
            c.CategoryProducts = dataAccessService.GetProductsByCategory(c.Id).Take(4);
        }

        data = new List<Category>(categories);
    }
}


